{"version":3,"sources":["App.js","map.js","serviceWorker.js","index.js"],"names":["App","props","state","newItem","list","todoValue","id","Date","now","value","isDone","this","push","setState","updatedlist","filter","item","input","className","type","placeholder","required","onChange","e","updateInput","target","onClick","addItem","disabled","length","map","key","deletItem","React","Component","SimpleMap","defaultProps","center","lat","lng","zoom","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uQA+DeA,G,wDA1Db,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,QAAS,GACTC,KAAM,IAJQ,E,oDAQVC,GACN,GAAiB,KAAdA,EAAiB,CAClB,IAAMF,EAAU,CACdG,GAAIC,KAAKC,MACTC,MAAOJ,EACPK,QAAQ,GAEJN,EAAI,YAAOO,KAAKT,MAAME,MAC5BA,EAAKQ,KAAKT,GACVQ,KAAKE,SAAS,CAACT,OAAKD,QAAS,Q,gCAIvBG,GACR,IACMQ,EADI,YAAOH,KAAKT,MAAME,MACHW,QAAO,SAAAC,GAAI,OAAIA,EAAKV,KAAOA,KACpDK,KAAKE,SAAS,CAACT,KAAMU,M,kCAGXG,GACVN,KAAKE,SAAS,CAACV,QAASc,M,+BAGjB,IAAD,OACN,OACE,6BACE,wBAAIC,UAAU,aAAd,YACA,yBAAKA,UAAU,cAAf,iBAEE,6BACA,2BAAOC,KAAK,OAAOD,UAAU,aAAaE,YAAY,eAAeC,UAAQ,EAACZ,MAAOE,KAAKT,MAAMC,QAASmB,SAAU,SAAAC,GAAC,OAAI,EAAKC,YAAYD,EAAEE,OAAOhB,UAClJ,4BAAQS,UAAU,UAAUQ,QAAS,kBAAM,EAAKC,QAAQ,EAAKzB,MAAMC,UAAUyB,UAAWjB,KAAKT,MAAMC,QAAQ0B,QAA3G,YACA,yBAAKX,UAAU,QACb,4BACCP,KAAKT,MAAME,KAAK0B,KAAI,SAAAd,GACnB,OACE,wBAAIe,IAAKf,EAAKV,IACXU,EAAKP,MACN,4BAAQS,UAAU,SAASQ,QAAS,WAAK,EAAKM,UAAUhB,EAAKV,MAA7D,sB,GAhDA2B,IAAMC,YCElBC,G,qLAAkBD,cAAlBC,EACGC,aAAe,CACpBC,OAAQ,CACNC,IAAK,MACLC,IAAK,OAEPC,KAAM,ICCUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f2247885.chunk.js","sourcesContent":["import React from 'react';\nimport \"./App.css\";\n\nclass App extends React.Component{\n\n  constructor(props){\n    super(props);\n    this.state = {\n      newItem: \"\",\n      list: []\n    };\n  }\n\n  addItem(todoValue){\n    if(todoValue !== \"\"){\n      const newItem = {\n        id: Date.now(),\n        value: todoValue,\n        isDone: false\n      };\n      const list = [...this.state.list];\n      list.push(newItem);\n      this.setState({list,newItem: \"\"});\n    }\n  }\n\n  deletItem(id){\n    const list = [...this.state.list];\n    const updatedlist = list.filter(item => item.id !== id);\n    this.setState({list: updatedlist});\n  }\n\n  updateInput(input){\n    this.setState({newItem: input});\n  }\n\n  render(){\n    return(\n      <div>\n        <h1 className=\"app-title\">Todo APP</h1>\n        <div className=\"container1\">\n          Add an Item...\n          <br/>\n          <input type=\"text\" className=\"input-text\" placeholder=\"write a todo\" required value={this.state.newItem} onChange={e => this.updateInput(e.target.value)}/>\n          <button className=\"add-btn\" onClick={() => this.addItem(this.state.newItem)} disabled={!this.state.newItem.length}>Add todo</button>\n          <div className=\"list\">\n            <ul>\n            {this.state.list.map(item => {\n              return(\n                <li key={item.id}>\n                  {item.value}\n                  <button className=\"button\" onClick={()=>{this.deletItem(item.id)}}>Delete</button>\n                </li> \n              );\n            })}\n            </ul>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\n \nconst AnyReactComponent = ({ text }) => <div>{text}</div>;\n \nclass SimpleMap extends Component {\n  static defaultProps = {\n    center: {\n      lat: 59.95,\n      lng: 30.33\n    },\n    zoom: 11\n  };\n \n  render() {\n    return (\n      // Important! Always set the container height explicitly\n      <div style={{ height: '100vh', width: '100%' }}>\n        <GoogleMapReact\n         bootstrapURLKeys={{ key: 'AIzaSyAiC03L3KfE_JYWvdhkHpvNrMOsQjRKKjc' }}\n          defaultCenter={this.props.center}\n          defaultZoom={this.props.zoom}\n        >\n          <AnyReactComponent\n            lat={59.955413}\n            lng={30.337844}\n            text=\"My Marker\"\n          />\n        </GoogleMapReact>\n      </div>\n    );\n  }\n}\n \nexport default SimpleMap;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport SimpleMap from './map';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}